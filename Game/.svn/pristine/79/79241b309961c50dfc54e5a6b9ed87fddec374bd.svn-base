package game.server.model;

import game.server.interfaces.DatabaseInterface;

import java.util.Arrays;
import java.util.List;

import org.junit.Test;

/**
 * GAME
 * MAIN DATABASE 
 * 
 * @author Leonardo
 *
 */
public class Database implements DatabaseInterface {
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	//START DATABASE
	/**
	* STATIC GAME BOARD VARS
	* 
	* -Scalable
	* -Normal:  2+ players
	* -Variant: 2  players
	*/ 
	private final int INITIAL_PLOT_CARDS_NUM = 1;
	private final int STANDARD_PLOT_CARDS_NUM = 5;
	private final int PLOT_TYPES_NUM = 6; //LINKED: C
	private final int TOT_PLOT_CARDS_NUM = STANDARD_PLOT_CARDS_NUM * PLOT_TYPES_NUM;
	private final int REGION_PER_PLOT_NUM = 3;
	
	private final int ISLAND_NUM = 1;
	private final int REGION_NUM = 18; //LINKED: E
	private final int CITY_REGION_NUM = 1; //LINKED: D
	
	private final int ENCLOSURE_NUM = 20;
	private final int FINAL_ENCLOSURE_NUM = 12;
	
	private final int POSITION_NUM = 42; //LINKED: B
	
	private final int SHEEP_NUM = 18;
	private final int SHEEP_B_NUM = 1;
	private final int SHEEP_VALUE = 1;
	private final int SHEEP_B_VALUE = 2;
	
	private final int DINARS_TOT_NUM = 80;
	private final int DINAR_ASSIGN_NUM = 20;
	private final int DINAR_ASSIGN_VARIANT_NUM = 30;
	
	private final int DICE_NUM = 1;
	
	private final int TOT_PLAYER_MIN_NUMBER = 2; 
	private final int TOT_PLAYER_MAX_NUMBER = 4; 
	private final int TOT_SHEPHERD_NUM = TOT_PLAYER_MIN_NUMBER + TOT_PLAYER_MAX_NUMBER; //LINKED: A
	private final int TOT_SHEPHERD_VARIANT_NUM = 2;
	
	private final int MAX_MOVEMENT_COUNT = 3;
	private final int SHEPHERD_MOVEMENT_DINARS_COST = 1;
	private final int PLOT_CARDS_VALUE_MULTIPLIER = 1;	
	
	private final List<String> SHEPHERD_COLOR = Arrays.asList("Red", "Blue", "Green", "Yellow", "Red", "Blue"); //LINKED: A
	
	private final List<String> PLOT_TYPES = Arrays.asList("Hill", "Forest", "Grain", "Swamp", "Mountain", "Desert"); //LINKED: C
	private final List<String> CITY_TYPES = Arrays.asList("Sheepsburg"); //LINKED: D
	
	private final List<Integer> POSITION_VIEWER_VALUE = Arrays.asList(1,2,5,1,5,4,6,2,1,3,4,6,4,5,2,1,3,6,1,3,5,2,1,3,3,2,6,5,4,2,1,4,3,2,1,5,6,2,1,3,4,2); //LINKED: B
	
	//row: region id | index: adjacent positions || note: positions number is +1 !
	private final List<int[]> POSITIONS_PER_REGION = Arrays.asList(
					new int [][] { 
					{1,41,42},
					{1,2,10,11},
					{8,9,10,12,13,14},
					{2,3,9},
					{3,4,7,8},
					{6,7,14,15,16,17},
					{5,6,4},
					{5,15,18,19},
					{16,18,20,21,29,30},
					{19,20,22},
					{21,22,24,23},
					{26,27,28,29,31,24},
					{23,25,26},
					{25,27,32,38},
					{32,33,34,35,37,28},
					{33,38,39},
					{39,34,40,41},
					{11,12,36,35,40,42}
					}
					); //LINKED: E
	
	//row: region id | index: adjacents positions || note: positions number is +1 !
	private final List<int[]> POSITIONS_PER_CITY = Arrays.asList(
					new int [][] { 
					{17,13,30,31,36,37} //sheepsburg
					}
					); //LINKED: D
	
	//row: position id | index: adjacents positions  || note: positions number is +1 !
	private final List<int[]> POSITIONS_ADJACENTS_MATRIX = Arrays.asList(
					new int [][] {
					{42,11},//1
					{9,10},//2
					{9,8},//3
					{7,6},//..
					{6,15},
					{7,15,5,4},
					{8,4,6,14},
					{7,14,3,9},
					{2,10,3,8},
					{11,12,9,2},
					{10,12,42,1},
					{11,10,13,36},
					{17,14,36,12},
					{17,13,7,8},
					{16,18,5,6},
					{15,18,17,30},
					{16,30,13,14},
					{19,20,16,15},
					{20,18},
					{21,22,18,19},
					{24,29,22,20},
					{20,21},
					{24,26},
					{26,23,21,29},
					{26,27},
					{25,27,23,24},
					{28,32,26,25},
					{32,27,31,37},
					{21,24,30,31},
					{29,31,16,17},
					{29,30,37,28},
					{27,28,38,33},
					{32,38,34,39},
					{33,39,35,40},
					{34,40,36,37},
					{35,37,12,13},
					{31,28,35,36},
					{32,33},
					{33,34},
					{35,34},
					{40,42},
					{41,40,1,11}
					}
					);
	
	
	//END DATABASE
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	//START METHODS
	
	/**
	 * Get the number of initial plot cards
	 */
	public int getInitialPlotCardNum(){
		return INITIAL_PLOT_CARDS_NUM;
	}
	/**
	 * Get the number of standard plot cards
	 */
	public int getStandardPlotCardsNum(){
		return STANDARD_PLOT_CARDS_NUM;
	}
	
	/**
	 * Get the number of plot types
	 */
	public int getPlotTypesNum(){
		return PLOT_TYPES_NUM;
	}
	
	/**
	 * Get the total number of plot cards
	 */
	public int getTotPlotCardsNum(){
		return TOT_PLOT_CARDS_NUM;
	}
	
	/**
	 * Get the number of every region per plot
	 */
	public int getRegionPerPlotNum(){
		return REGION_PER_PLOT_NUM;
	}
	
	/**
	 * Get the number of islands
	 */
	public int getIslandNum(){
		return ISLAND_NUM;
	}
	
	/**
	 * Get the number of regions
	 */
	public int getRegionNum(){
		return REGION_NUM;
	}
	
	/**
	 * Get the number of cities 
	 */
	public int getCityRegionNum(){
		return CITY_REGION_NUM;
	}
	
	/**
	 * Get the number of enclosures
	 */
	public int getEnclosureNum(){
		return ENCLOSURE_NUM;
	}
	
	/**
	 * Get the number of final enclosures
	 */
	public int getFinalEnclosureNum(){
		return FINAL_ENCLOSURE_NUM;
	}
	
	/**
	 * Get the number of positions that can be 
	 * taken by the shepherds 
	 */
	public int getPositionNum(){
		return POSITION_NUM;
	}
	
	/**
	 * Get the number of sheep
	 */
	public int getSheepNum(){
		return SHEEP_NUM;
	}
	
	/**
	 * Get the number of black sheep
	 */
	public int getSheepBNum(){
		return SHEEP_B_NUM;
	}
	
	/**
	 * Get the sheep's value among the final score
	 */
	public int getSheepValue(){
		return SHEEP_VALUE;
	}
	
	/**
	 * Get the black sheep's value among the final score
	 */
	@Test
	public int getSheepBValue(){
		return SHEEP_B_VALUE;
	}
	
	/**
	 * Get the total number of dinars 
	 */
	public int getDinarsTotNum(){
		return DINARS_TOT_NUM;
	}
	
	/**
	 * Get the number of dinars assigned to each player
	 * if they are 3 or 4 
	 */
	public int getDinarAssignNum(){
		return DINAR_ASSIGN_NUM;
	}
	
	/**
	 * Get the number of dinars assigned to each player
	 * if they are 2
	 */
	public int getDinarAssignVariantNum(){
		return DINAR_ASSIGN_VARIANT_NUM;
	}
	
	/**
	 * Get the number of dices in the game
	 */
	public int getDiceNum(){
		return DICE_NUM;
	}
	
	/**
	 * Get the total number of shepherds in the game
	 */
	public int getTotShepherdNum(){
		return TOT_SHEPHERD_NUM;
	}
	
	/**
	 * Get the minimum number of total players
	 */
	public int getTotPlayerMinNumber(){
		return TOT_PLAYER_MIN_NUMBER;
	}
	
	/**
	 * Get the maximum number of total players
	 */
	public int getTotPlayerMaxNumber(){
		return TOT_PLAYER_MAX_NUMBER;
	}
	
	/**
	 * Get the total number of shepherds to be assigned
	 * to both players 
	 */
	public int getTotShepherdVariantNumber(){
		return TOT_SHEPHERD_VARIANT_NUM;
	}
	
	/**
	 * Get the maximum number of movements that can be
	 * played per turn by each player 
	 */
	public int getMaxMovementCount(){
		return MAX_MOVEMENT_COUNT;
	}
	
	/**
	 * Get how many dinars are necessary to move
	 * a shepherd
	 */
	public int getShepherdMovementDinarsCost(){
		return SHEPHERD_MOVEMENT_DINARS_COST;
	}
	
	/**
	 * Get the multiplier of plot cards value
	 */
	public int getPlotCardsValueMultiplier(){
		return PLOT_CARDS_VALUE_MULTIPLIER;
	}
	
	/**
	 * Get the color of the shepherds
	 */
	public List<String> getShepherdColor(){
		return SHEPHERD_COLOR;
	}
	
	/**
	 * Get types of plot
	 */
	public List<String> getPlotTypes(){
		return PLOT_TYPES;
	}
	
	/**
	 * Get the name of cities
	 */
	public List<String> getCityTypes(){
		return CITY_TYPES;
	}
	
	/**
	 * Get the position viewer value
	 */
	public List<Integer> getPositionViewerValue(){
		return POSITION_VIEWER_VALUE;
	}
	
	/**
	 * Get the different positions per regions
	 */
	public List<int[]> getPositionsPerRegion(){
		return POSITIONS_PER_REGION;
	}
	
	/**
	 * Get the different positions per cities
	 */
	public List<int[]> getPositionsPerCity(){
		return POSITIONS_PER_CITY;
	}
	
	/**
	 * Get the different positions of adjacent matrix
	 */
	public List<int[]> getPositionsAdjacentsMatrix(){
		return POSITIONS_ADJACENTS_MATRIX;
	}
	//END SECONDARY METHODS
	/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
}
