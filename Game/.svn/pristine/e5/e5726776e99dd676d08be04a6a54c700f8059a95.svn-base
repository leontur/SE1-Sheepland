package game.client.view.gui;

import game.client.rmi.StartClientRmi;
import game.client.socket.SocketClientGuiUpdater;
import game.client.socket.StartClientSocket;
import game.client.view.gui.model.Sheepland;
import game.server.interfaces.AddPlayerInterface;

import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;

/**
 * RUNNABLE IN NEW THREAD
 * THIS CLASS
 * CHECK FROM SERVER FOR UPDATES
 * EVERY N SECONDS
 * AND CALL THE UPDATE METHODS FOR MAP
 * 
 * @author Leonardo
 *
 */
public class AutoUpdateEngine {
	
	private AddPlayerInterface api;
	
	/**
	 * Async execution
	 * @throws InterruptedException
	 */
	public void asyncUpdateService(final int time, final Sheepland obj, final boolean isSocketMode) throws InterruptedException{
    	
		//task used to create a thread
        Runnable task = new Runnable() {
            public void run() {
                try {
                	
                	//Wait before start
                	Thread.sleep(1000);
                	
            		//call engine
            		manageUpdate(time, obj, isSocketMode);

                } catch (Exception ex) {
                    //handle error which cannot be thrown back
                }
            }
        };
        
        //run task in new thread
        Thread counter = new Thread(task);
        counter.start();
        //..and the calling class can go ahead..
    }
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //ENGINE
	
    @SuppressWarnings("unchecked")
	private void manageUpdate(int time, Sheepland obj, boolean isSocketMode) throws InterruptedException, ClassNotFoundException, RemoteException{
        
    	
    	if(!isSocketMode){
    	
	    	////////////
	    	//RMI MODE//
	    	////////////
	    	
	    	//retrieve interface
	    	api = StartClientRmi.getRemoteAddPlayerInterface();
	    	
	    	//get current player number
	    	int currPlayer = StartClientRmi.getClientId();
	    	currPlayer--;
	    	
	    	//LOOP
	    	while(obj.isRunningGame()){
	   		
	    		//CHECK AND SET UPDATES
	    		
	    		try{
	    			//PAWNS
		    		obj.updateRegionBusy(api.getGuiRegionBusy());
		        	obj.updatePlayerShepherdPos(api.getGuiPlayersShepherdLoc());
		        	obj.updatePlayerDinars(api.getGuiPlayerDinar(currPlayer));
		        	obj.updatePlayerInitialCard(api.getGuiPlayerInitialCard(currPlayer));
		        	obj.updatePlayerStandardCard(api.getGuiPlayerStandardCards(currPlayer));
		        	obj.updateStandardEnclosure(api.getGuiStandardEnclosures());
		        	obj.updateFinalEnclosure(api.getGuiFinalEnclosures());
		        	obj.updatePositionBusy(api.getGuiPositionEnclosureBusy());
		        	obj.updatePlayerNumber(currPlayer+1);
		        	
	    		}catch(Exception e){
	    			//TODO
	    			//System.out.println(e);
	    			//e.printStackTrace();
	    		}
	    		
	        	try{
		        	//GAME LOGIC
		        	obj.updateCurrPlayerNum(api.getGuiCurrentPlayerNumber());
		        	obj.updateDiceNum(api.getGuiLastDiceNum());
		        	
	    		}catch(Exception e){
	    			//System.out.println(e);
	    			//TODO
	    			e.printStackTrace();
	    		}
	    		
	    		//wait for eventual repaints
	    		Thread.sleep(500);
	    		
	    		try{
	    			
	    			//call main update functions
	    			obj.performUpdate();
	    			
	    		}catch(Exception e){
	    			//e.printStackTrace();
	    			//System.out.println("impossible do map update");
	    		}
	    		
	    		//wait between check for updates
	    		Thread.sleep(time);
	    		// -> next check until game ends
	    	}
	    		
    	}else{
	    		
    		///////////////
	    	//SOCKET MODE//
	    	///////////////
    		
    		//get current player number
	    	int currPlayer = StartClientSocket.getClientId();
	    	
	    	//port for update
	    	//5001 5002 5003 5004
	    	int clientPort = 5000 + currPlayer + 1;
	    	
	    	//debug
	    	System.out.println("+++NEW GUI UPDATE MANAGER CREATED | on port " + clientPort + " +++");
	    	
	    	//commands from server 
	    	//format: [command]#[vars]
	    	String[] guiCmds = new String[]{
    				"getGuiRegionBusy#", 						//0 getGuiRegionBusy()
    				"getGuiPlayersShepherdLoc#", 				//1 getGuiPlayersShepherdLoc()
    				"getGuiPlayerDinar#" + currPlayer, 			//2 getGuiPlayerDinar(currPlayer)
    				"getGuiPlayerInitialCard#" + currPlayer,	//3 getGuiPlayerInitialCard(currPlayer)
    				"getGuiPlayerStandardCards#" + currPlayer, 	//4 getGuiPlayerStandardCards(currPlayer)
    				"getGuiStandardEnclosures#",				//5 getGuiStandardEnclosures()
    				"getGuiFinalEnclosures#", 					//6 getGuiFinalEnclosures()
    				"getGuiPositionEnclosureBusy#",				//7 getGuiPositionEnclosureBusy()
    				"getGuiCurrentPlayerNumber#",				//8 getGuiCurrentPlayerNumber()
    				"getGuiLastDiceNum#"  						//9 getGuiLastDiceNum()
    		};
	    	
	    	//LOOP
	    	while(obj.isRunningGame()){
	    		
	    		//CHECK AND SET UPDATES
	    		try{
	    			//PAWNS
		    		obj.updateRegionBusy((ArrayList<int[]>) SocketClientGuiUpdater.requestUpdate(guiCmds[0], clientPort));
		        	obj.updatePlayerShepherdPos((ArrayList<List<Integer>>) SocketClientGuiUpdater.requestUpdate(guiCmds[1], clientPort));
		        	obj.updatePlayerDinars((Integer) SocketClientGuiUpdater.requestUpdate(guiCmds[2], clientPort));
		        	obj.updatePlayerInitialCard((Integer) SocketClientGuiUpdater.requestUpdate(guiCmds[3], clientPort));
		        	obj.updatePlayerStandardCard((ArrayList<List<String>>) SocketClientGuiUpdater.requestUpdate(guiCmds[4], clientPort));
		        	obj.updateStandardEnclosure((Integer) SocketClientGuiUpdater.requestUpdate(guiCmds[5], clientPort));
		        	obj.updateFinalEnclosure((Integer) SocketClientGuiUpdater.requestUpdate(guiCmds[6], clientPort));
		        	obj.updatePositionBusy((ArrayList<Integer>) SocketClientGuiUpdater.requestUpdate(guiCmds[7], clientPort));
		        	obj.updatePlayerNumber(currPlayer+1);
		        	
	    		}catch(Exception e){
	    			//TODO
	    			//System.out.println(e);
	    			//e.printStackTrace();
	    		}
	    		
	        	try{
		        	//GAME LOGIC
		        	obj.updateCurrPlayerNum((Integer) SocketClientGuiUpdater.requestUpdate(guiCmds[8], clientPort));
		        	obj.updateDiceNum((Integer) SocketClientGuiUpdater.requestUpdate(guiCmds[9], clientPort));
		        	
	    		}catch(Exception e){
	    			//System.out.println(e);
	    			e.printStackTrace();
	    		}
	    		
	    		//wait for eventual repaints
	    		Thread.sleep(500);
	    		
	    		try{
	    			
	    			//call main update functions
	    			obj.performUpdate();
	    			
	    		}catch(Exception e){
	    			//e.printStackTrace();
	    			//System.out.println("impossible do map update");
	    		}
	    		
	    		//wait between check for updates
	    		Thread.sleep(time);
	    		// -> next check until game ends
	    	}
    	}   
    }
       
    //
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
}
