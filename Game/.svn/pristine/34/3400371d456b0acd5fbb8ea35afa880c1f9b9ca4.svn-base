package game.client.view.gui;

import game.client.interfaces.ClientConsoleInterface;
import game.client.view.gui.model.*;

import java.awt.Component;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.rmi.RemoteException;
import java.util.List;

import javax.swing.JComponent;
import javax.swing.SwingUtilities;

/**
 * MOVEMENT CONTROLLER
 * MAIN CLASS
 * 
 * @author Leonardo
 */
public class MovementsController implements MouseListener {
	
	/**
	 * CLASS VARS
	 */
	private Object selectedObj;
	private List<Object> allObjList;
	private static DestinationDatabase ddb = new DestinationDatabase();
	private boolean canMove;
	private int rX, rY, rC;
	private double pX, pY;
	private static boolean catcher = false;
	private static int catcherScope = 0;
	private static Sheepland sheepland;
	private static String options = "";
	
	/**
	 * CLASS CONSTRUCTOR
	 */
	public MovementsController(List<Object> allObjList) {
		selectedObj = null;
		this.allObjList = allObjList;
	}

	//////////////////////////////////////////////////////////////////////////
	
	/**
	 * MOUSE CLICK EVENT LISTENER
	 */	
	public void mousePressed(MouseEvent ev) {
		
		if(SwingUtilities.isLeftMouseButton(ev)){

			//CHECK IF CAPTCHER MODE
			if(!catcher){
				//start std movement controller
				movePerformStandardAction(ev);
				
			}else{
				try{
					//print on console for server
					clickOnPointGetId(ev);
				}catch(Exception e){
					//TODO LOGGER
					//e.printStackTrace();
				}
			}
			
			//debug
			//System.out.println("x: " + ev.getX() + "   y: " + ev.getY());
			
		}else if (SwingUtilities.isRightMouseButton(ev)){
			//TODO METTERE ZOOM REGIONE ON CLICK?!
			;
		}
	}

	/**
	 * ACTION
	 * @param e : mouse event (click)
	 */
	private void movePerformStandardAction(MouseEvent e) {
		
		Object objUnderMouse = null;
		
		//find the object that has the mouse over
		Point mousePos = e.getPoint();
		
		//for each object
		for(Object obj : allObjList) {
			//check if the mouse cursor is inside the object's rectangular region
			if(((Component) obj).getBounds().contains(mousePos)){
				objUnderMouse = obj;
				break;
			}
		}
		
		//if there is an object under mouse -> the user wants to select
		if(objUnderMouse != null) {
			
			//save reference to the old selected obj
			Object lastSelObj = selectedObj;
			
			//save the reference to the obj that is under the mouse pointer
			//e.getSource()
			selectedObj = objUnderMouse;
			
			//mark obj as selected
			((SelectableObject) selectedObj).setIsSelected(true);
			
			//deselect the last obj
			if(lastSelObj != null && lastSelObj != selectedObj){
				((SelectableObject) lastSelObj).setIsSelected(false);
			}
			
		}else{
		//if there is no object under mouse -> the user wants to move
			
			canMove = false;
						
			//CHECK THE KIND OF SELECTED OBJECT
			if(selectedObj instanceof Sheep || selectedObj instanceof SheepBlack){
				//if sheep or bsheep
				canMove = checkIfInRegion(e) != -1 ? true : false;
				
			}else if(selectedObj instanceof Shepherd){
				//is shepherd
				canMove = checkIfInPosition(e) != -1 ? true : false;
			}

			//PERFORM MOVEMENT			
			if(canMove){
				doMoveTo(selectedObj, e.getPoint());
			}else{
				//deselect
				//and not do any post movement
				if(selectedObj!=null){
					((SelectableObject) selectedObj).setIsSelected(false);
					selectedObj = null;
				}
			}
		}
	}
	
	//MOVEMENT PERFORMER
	private void doMoveTo(Object selectedObj, Point p){
		
		//if was selected an object to move
		if(selectedObj != null) {
			
			//calculate distance to perform move (pitagora)
			int distance = (int) Math.sqrt(
					Math.pow(((JComponent) selectedObj).getX() - pX, 2.0) +
					Math.pow(((JComponent) selectedObj).getY() - pY, 2.0)
					);
			
			//MOVEMENT CALL
			((MovableObject) selectedObj).moveTo(p, distance*10);
		}
		
	}
	
	//LISTENER INTERFACE EVENTS
	public void mouseEntered(MouseEvent e) {}
	public void mouseExited(MouseEvent e) {}
	public void mouseReleased(MouseEvent e) {}
	public void mouseClicked(MouseEvent ev) {}
	
	
	/**
	 * FOR TURN UPDATE REQUEST:
	 * SET THE CONTROLLER AS COORD CAPTCER
	 * SCOPE is to print on console (remote)
	 * 	1: the selected position id
	 * 	2: the selected region id
	 * 	3: the selected plot type id
	 *  4: the selected move type
	 *  5: the selected shepherd id
	 * 
	 * NOTE: catcher is automatically resetted to false at the end of the request
	 */
	public static void setCatcher(boolean status, int scope, Sheepland sl, String opt){
		catcher = status;
		catcherScope = scope;
		sheepland = sl;
		options = opt;
	}

	
	//////////////////////////////////////////////////////
	//CHECK FUNCTIONS
	
	/**
	 * Return the id of the clicked region 0-17-18
	 * (if not region above, return -1)
	 * @param e
	 * @return
	 */
	private int checkIfInRegion(MouseEvent e){
		
		//CHECK IF IN AREA OF A REGION
		for(int i=0; i<ddb.getRegionsCenterCoords().size(); i++){
								
			//region
			rX = ddb.getRegionsCenterCoords().get(i)[0];
			rY = ddb.getRegionsCenterCoords().get(i)[1];
			rC = ddb.getRegionsCenterCoords().get(i)[2];
			
			//point
			pX = e.getPoint().getX();
			pY = e.getPoint().getY();
			
			//check if in area
			if(Math.abs(rX-pX) <= rC && Math.abs(rY-pY) <= rC){
				return i;
			}
		}
		return -1;
	}
	
	/**
	 * Return the id of the clicked position 0-41
	 * (if not pos above, return -1)
	 * @param e
	 * @return
	 */
	private int checkIfInPosition(MouseEvent e){
		
		//CHECK IF IN AREA OF A POSITION
		for(int i=0; i<ddb.getPositionsCenterCoords().size(); i++){
							
			//position
			rX = ddb.getPositionsCenterCoords().get(i)[0];
			rY = ddb.getPositionsCenterCoords().get(i)[1];
			rC = ddb.getPositionsCenterCoords().get(i)[2];
			
			//point
			pX = e.getPoint().getX();
			pY = e.getPoint().getY();
			
			//check if in area
			if(Math.abs(rX-pX) <= rC && Math.abs(rY-pY) <= rC){
				return i;
			}
		}
		return -1;
	}
	
	/**
	 * Return true if the last click event is on area with coords passed.
	 * Pass coords as:  xa ya (a is point upper left)   xb yb (b is a point down right)
	 * @param e
	 * @return true or false
	 */
	private boolean checkIfInArea(MouseEvent e, int xa, int ya, int xb, int yb){
		
		if(
			(e.getX() >= xa && e.getX() <= xb)
			&&
			(e.getY() >= ya && e.getY() <= yb)
			){
			
			return true;
		}
		return false;
	}
	
	/**
	 * RETURN TO SERVER THE ID OF SELECTED POINT
	 * 
	 * @param e : mouse event (click)
	 * @throws RemoteException 
	 */
	private void clickOnPointGetId(MouseEvent e) throws RemoteException {
				
		if(catcherScope == 1){
			//return position id
			sheepland.setValueToSend(checkIfInPosition(e)+1);
			
		}else if(catcherScope == 2){
			//return 1 if move is ok
			
			int clickReg = checkIfInRegion(e);
			
			//recognize from the options arrived string, the two region to show arrows (the format is reg + "#" + newreg)
    		String[] parts = options.split("#");
    		int reg2 = Integer.parseInt(parts[1]);
    		
    		if((reg2-1) == clickReg){
    			sheepland.setValueToSend(1);
    		}else{
    			sheepland.setValueToSend(0);
    		}
			
		}else if(catcherScope == 3){
			//return selected plot type id by region click

			//region click id
			int region = checkIfInRegion(e);
			
			//verify that is not in a city
			if(region < ddb.getRegionsCenterCoords().size()-1 && region >= 0){
				
				String[] parts = options.split("#");
				
				//search for each region arrived from server
				for(int i=0; i<parts.length; i++){
					int regServer = Integer.parseInt(parts[i]);
					
					//if one is clicked
					if(region == regServer){
						//return the index
						sheepland.setValueToSend(i+1);
						catcher = false;
						return;
					}
				}
			}
			//return default
			sheepland.setValueToSend(0);
			
		}else if(catcherScope == 4){
			//return the selected move type id
			
			//for each move type
			for(int i=0; i<ddb.getMoveTypeCoords().size(); i++){
			
				//check if click is in area
				if(
					checkIfInArea(
						e,
						ddb.getMoveTypeCoords().get(i)[0],
						ddb.getMoveTypeCoords().get(i)[1],
						ddb.getMoveTypeCoords().get(i)[2],
						ddb.getMoveTypeCoords().get(i)[3]
						)
					){
					//return i type
					sheepland.setValueToSend(i+1);
					catcher = false;
					return;
				}	
			}
			//return default
			sheepland.setValueToSend(0);
			
		}else if(catcherScope == 5){
			//return the shepherd id
			
			//check if a shepherd is above click
			
			Object objUnderMouse = null;
			Point mousePos = e.getPoint();
			//for each object
			for(Object obj : allObjList) {
				//check if the mouse cursor is inside the object's rectangular region
				if(((Component) obj).getBounds().contains(mousePos)){
					objUnderMouse = obj;
					break;
				}
			}
			
			if(objUnderMouse != null) {
				//save the reference to the obj under 
				selectedObj = objUnderMouse;
				
				//mark obj as selected
				((SelectableObject) selectedObj).setIsSelected(true);
				
				//check for shepherd
				if(selectedObj instanceof Shepherd){				
					//is shepherd -> return id
					sheepland.setValueToSend(((Shepherd) selectedObj).getShepherdNum()+1);
				}
				
				//deselect
				if(selectedObj!=null){
					((SelectableObject) selectedObj).setIsSelected(false);
					selectedObj = null;
				}
				
			}else{
			
				//deselect
				if(selectedObj!=null){
					((SelectableObject) selectedObj).setIsSelected(false);
					selectedObj = null;
				}
				
				//return default
				sheepland.setValueToSend(0);
			}
		}
		
		catcher = false;
	}
	
}