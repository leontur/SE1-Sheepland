package game.server.controller;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.List;
import java.util.ArrayList;

import game.server.model.Dice;
import game.server.model.Dinar;
import game.server.model.Enclosure;
import game.server.model.FinalEnclosure;
import game.server.model.Game;
import game.server.model.InitialCard;
import game.server.model.Player;
import game.server.model.Position;
import game.server.model.Region;
import game.server.model.SheepBlack;
import game.server.model.Shepherd;
import game.server.view.Console;
import game.server.view.ViewerInterface;

import org.junit.Test;

public class MoveShepherdTest {

	@Test
	public void moveShepherdTest() {
		Game game = new Game();
		Shepherd shepherd = new Shepherd(1, "Red");
		Player player = new Player("Player 1", null, null, null);
		List<Enclosure> allStandardEnclosures = new ArrayList<Enclosure>();
		allStandardEnclosures.add(new Enclosure());
		List<FinalEnclosure> allFinalEnclosures = new ArrayList<FinalEnclosure>();
		allFinalEnclosures.add(new FinalEnclosure());
		List<Position> allPositions = new ArrayList<Position>();
		allPositions.add(new Position());
		ViewerInterface mainGameViewer = new Console(game);
		int targetPos = CheckInput.validateSelectedPosition(mainGameViewer);
		
		//reg
		List<Region> allRegions = new ArrayList<Region>();
		allRegions.add(new Region(0, null, "hill"));
		allRegions.add(new Region(1, null, "hill"));
		
		//pos
		List<Position> adjPos = new ArrayList<Position>();
		Position checkpos = new Position(0,1);
		adjPos.add(checkpos);
		adjPos.add(new Position(1,0));
		
		//set poss
		allRegions.get(0).setAdjPositions(adjPos);
		allRegions.get(1).setAdjPositions(adjPos);
		
		//set values
		game.setGameAllRegions(allRegions);
		shepherd.setNewShepherdTarget(allPositions.get(0));
		allPositions.set(targetPos, null);
		
		//check
		MoveShepherd.moveShepherd(game, player, shepherd, allStandardEnclosures, allFinalEnclosures, allPositions, mainGameViewer, targetPos, true);
		assertEquals(shepherd.getCurrShepherdTarget().getPosIdentifier(), targetPos-1);
	}     
}
